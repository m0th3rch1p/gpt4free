name: Build All Packages

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty for auto)'
        required: false
        type: string

env:
  G4F_VERSION: ${{ github.ref_name || inputs.version || '0.0.0-dev' }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_release: ${{ steps.version.outputs.is_release }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/ ]]; then
            VERSION="${{ github.ref_name }}"
            IS_RELEASE="true"
          elif [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
            IS_RELEASE="false"
          else
            VERSION="0.0.0-dev"
            IS_RELEASE="false"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

  # PyPI Package
  build-pypi:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine
      - name: Build package
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: python -m build
      - name: Verify package
        run: |
          python -m twine check dist/*
          ls -la dist/
      - name: Upload PyPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pypi-package
          path: dist/

  # Windows Executable
  build-windows-exe:
    runs-on: windows-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip install -e .
      - name: Build Windows executable
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          pyinstaller --onefile --name g4f-windows-${{ needs.prepare.outputs.version }} --icon projects/windows/icon.ico g4f_cli.py
      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: dist/g4f-windows-*.exe

  # Linux Executable
  build-linux-exe:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-slim.txt
          pip install pyinstaller
          pip install -e .
      - name: Build Linux executable
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          pyinstaller --onefile --name g4f-linux-${{ needs.prepare.outputs.version }} g4f_cli.py
      - name: Make executable
        run: chmod +x dist/g4f-linux-*
      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-exe
          path: dist/g4f-linux-*

  # macOS Executable
  build-macos-exe:
    runs-on: macos-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-min.txt
          pip install pyinstaller
          pip install -e .
      - name: Build macOS executable
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          pyinstaller --onefile --name g4f-macos-${{ needs.prepare.outputs.version }} g4f_cli.py
      - name: Upload macOS executable
        uses: actions/upload-artifact@v4
        with:
          name: macos-exe
          path: dist/g4f-macos-*

  # Debian Package
  build-deb:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        arch: [amd64, arm64, armhf]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python python3-setuptools python3-dev
      - name: Create Debian package structure
        run: |
          mkdir -p debian/g4f/usr/bin
          mkdir -p debian/g4f/usr/lib/python3/dist-packages
          mkdir -p debian/g4f/DEBIAN
      - name: Build Python package
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          python setup.py build
          python setup.py install --root=debian/g4f --prefix=/usr
      - name: Create control file
        run: |
          cat > debian/g4f/DEBIAN/control << EOF
          Package: g4f
          Version: ${{ needs.prepare.outputs.version }}
          Section: python
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Maintainer: Tekky <support@g4f.ai>
          Description: The official gpt4free repository
           Various collection of powerful language models
          Depends: python3, python3-requests, python3-aiohttp
          EOF
      - name: Build .deb package
        run: |
          dpkg-deb --build debian/g4f g4f-${{ needs.prepare.outputs.version }}-${{ matrix.arch }}.deb
      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: deb-${{ matrix.arch }}
          path: g4f-*.deb

  # Docker Images (reuse existing workflow logic)
  build-docker:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        env:
          G4F_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # Build slim image for multiple platforms
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file docker/Dockerfile-slim \
            --tag hlohaus789/g4f:${{ needs.prepare.outputs.version }}-slim \
            --tag hlohaus789/g4f:latest-slim \
            --build-arg G4F_VERSION=${{ needs.prepare.outputs.version }} \
            --push .
          
          # Build full image for amd64
          docker buildx build \
            --platform linux/amd64 \
            --file docker/Dockerfile \
            --tag hlohaus789/g4f:${{ needs.prepare.outputs.version }} \
            --tag hlohaus789/g4f:latest \
            --build-arg G4F_VERSION=${{ needs.prepare.outputs.version }} \
            --push .

  # WinGet Package Manifest
  create-winget-manifest:
    runs-on: ubuntu-latest
    needs: [prepare, build-windows-exe]
    if: needs.prepare.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: ./artifacts
      - name: Calculate hash
        id: hash
        run: |
          HASH=$(sha256sum ./artifacts/g4f-windows-*.exe | cut -d' ' -f1)
          echo "hash=${HASH}" >> $GITHUB_OUTPUT
          SIZE=$(stat -c%s ./artifacts/g4f-windows-*.exe)
          echo "size=${SIZE}" >> $GITHUB_OUTPUT
      - name: Create WinGet manifest
        run: |
          mkdir -p winget/manifests/g/g4f/${{ needs.prepare.outputs.version }}
          
          # Version manifest
          cat > winget/manifests/g/g4f/${{ needs.prepare.outputs.version }}/g4f.yaml << EOF
          PackageIdentifier: g4f
          PackageVersion: ${{ needs.prepare.outputs.version }}
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.4.0
          EOF
          
          # Installer manifest
          cat > winget/manifests/g/g4f/${{ needs.prepare.outputs.version }}/g4f.installer.yaml << EOF
          PackageIdentifier: g4f
          PackageVersion: ${{ needs.prepare.outputs.version }}
          Installers:
          - Architecture: x64
            InstallerType: exe
            InstallerUrl: https://github.com/xtekky/gpt4free/releases/download/${{ needs.prepare.outputs.version }}/g4f-windows-${{ needs.prepare.outputs.version }}.exe
            InstallerSha256: ${{ steps.hash.outputs.hash }}
            InstallerSwitches:
              Silent: /S
              SilentWithProgress: /S
          ManifestType: installer
          ManifestVersion: 1.4.0
          EOF
          
          # Locale manifest
          cat > winget/manifests/g/g4f/${{ needs.prepare.outputs.version }}/g4f.locale.en-US.yaml << EOF
          PackageIdentifier: g4f
          PackageVersion: ${{ needs.prepare.outputs.version }}
          PackageLocale: en-US
          Publisher: GPT4Free
          PublisherUrl: https://github.com/xtekky/gpt4free
          PackageName: g4f
          PackageUrl: https://github.com/xtekky/gpt4free
          License: GPL-3.0
          LicenseUrl: https://github.com/xtekky/gpt4free/blob/main/LICENSE
          ShortDescription: The official gpt4free repository
          Description: Various collection of powerful language models
          Tags:
          - ai
          - gpt
          - chatgpt
          - openai
          - free
          - client
          ManifestType: defaultLocale
          ManifestVersion: 1.4.0
          EOF
      - name: Upload WinGet manifest
        uses: actions/upload-artifact@v4
        with:
          name: winget-manifest
          path: winget/

  # Release Creation
  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, build-pypi, build-windows-exe, build-linux-exe, build-macos-exe, build-deb, create-winget-manifest]
    if: needs.prepare.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          release_name: Release ${{ needs.prepare.outputs.version }}
          body: |
            ## g4f ${{ needs.prepare.outputs.version }}
            
            ### Download Options
            
            **Python Package:**
            - PyPI: `pip install g4f==${{ needs.prepare.outputs.version }}`
            
            **Executables:**
            - Windows: Download `g4f-windows-${{ needs.prepare.outputs.version }}.exe`
            - Linux: Download `g4f-linux-${{ needs.prepare.outputs.version }}`  
            - macOS: Download `g4f-macos-${{ needs.prepare.outputs.version }}`
            
            **System Packages:**
            - Debian/Ubuntu: Download appropriate `.deb` file for your architecture
            - WinGet: `winget install Tekky.g4f` (after manifest approval)
            
            **Docker:**
            - `docker pull hlohaus789/g4f:${{ needs.prepare.outputs.version }}`
            - `docker pull hlohaus789/g4f:${{ needs.prepare.outputs.version }}-slim`
          draft: false
          prerelease: false
      - name: Upload Release Assets
        run: |
          # Upload all built artifacts as release assets
          # This would typically use a more sophisticated asset upload action
          echo "Release created with tag ${{ needs.prepare.outputs.version }}"

  # Publish to PyPI (only for releases)
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [prepare, build-pypi, create-release]
    if: needs.prepare.outputs.is_release == 'true'
    environment:
      name: pypi
      url: https://pypi.org/p/g4f
    permissions:
      id-token: write
    steps:
      - name: Download PyPI artifacts
        uses: actions/download-artifact@v4
        with:
          name: pypi-package
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1